stages:
  - build
  - test
  - deploy

cache:
  paths:
    - node_modules/

docker-build:       
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

unit-test:
  stage: test
  script:
    - apt-get update
    - apt-get install build-essential curl -y
    - curl -sL https://deb.nodesource.com/setup_12.x | bash -
    - apt install nodejs
    - npm install
    - npm test

  artifacts:
    paths:
      - ./
      - node_modules/

lint-test:
  stage: test
  script:
    - apt-get update
    - apt-get install npm build-essential -y
    - npm install -g n
    - n stable
    - n 12.22.5
    - npm install semver
    - npm install
    - npm run lint-all
  artifacts:
    paths:
      - node_modules/

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  only:
    - production
  script:
    - apt-get update
    - apt-get install docker-compose
    - docker image prune -f
    - docker-compose -f docker-compose.yml build --no-cache
    - docker-compose -f docker-compose.yml up -d
  when: manual
